// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-32TFS7K
// DateTime: 10.11.2017 22:13:07
// UserName: wowit
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using ProgramTree;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,ASSIGN=6,
    SEMICOLON=7,PLUS=8,MINUS=9,LEFT_BRACKET=10,RIGHT_BRACKET=11,DIV=12,
    MULT=13,VAR=14,COLON=15,COMMA=16,RETURN=17,GT=18,
    LT=19,EQ=20,NEQ=21,GET=22,LET=23,AND=24,
    OR=25,NOT=26,IF=27,ELSE=28,WHILE=29,DO=30,
    INUM=31,DNUM=32,BVAL=33,ID=34};

public struct ValueType
{ 
			public bool bVal;
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
			public FunHeader fHead;
			public Arguments args;
			public List<ExprNode> eList;
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// This defenition goes to class GPPGParser, which is a parser, that generated by gppg system
    public MainProgramNode root; // Syntax tree root 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[62];
  private static State[] states = new State[114];
  private static string[] nonTerms = new string[] {
      "expr", "ident", "term", "factor", "function", "fun_list", "fun_call", 
      "b_expr", "b_term", "b_factor", "not_factor", "relation", "assign", "statement", 
      "decl", "return", "cond", "proc", "while_cycle", "do_while_cycle", "stlist", 
      "block", "fun_header", "arguments", "expr_list", "progr", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{34,102},new int[]{-26,1,-6,3,-5,113,-23,5});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{34,102,2,-2},new int[]{-5,4,-23,5});
    states[4] = new State(-4);
    states[5] = new State(new int[]{3,7},new int[]{-22,6});
    states[6] = new State(-5);
    states[7] = new State(new int[]{34,65,27,69,3,7,17,79,29,87,30,93,7,100},new int[]{-21,8,-14,101,-13,11,-2,12,-17,68,-15,76,-22,77,-16,78,-18,83,-7,84,-19,86,-20,92});
    states[8] = new State(new int[]{4,9,34,65,27,69,3,7,17,79,29,87,30,93,7,100},new int[]{-14,10,-13,11,-2,12,-17,68,-15,76,-22,77,-16,78,-18,83,-7,84,-19,86,-20,92});
    states[9] = new State(-57);
    states[10] = new State(-11);
    states[11] = new State(-12);
    states[12] = new State(new int[]{6,13});
    states[13] = new State(new int[]{33,21,10,30,34,39,31,47,32,48,26,49},new int[]{-8,14,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[14] = new State(new int[]{7,15,25,16});
    states[15] = new State(-28);
    states[16] = new State(new int[]{33,21,10,30,34,39,31,47,32,48,26,49},new int[]{-9,17,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[17] = new State(new int[]{24,18,7,-31,25,-31,11,-31,16,-31});
    states[18] = new State(new int[]{33,21,10,30,34,39,31,47,32,48,26,49},new int[]{-11,19,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[19] = new State(-33);
    states[20] = new State(-35);
    states[21] = new State(-37);
    states[22] = new State(-38);
    states[23] = new State(new int[]{18,24,8,26,9,53,19,55,23,57,22,59,20,61,21,63,24,-45,7,-45,25,-45,11,-45,16,-45});
    states[24] = new State(new int[]{10,30,34,39,31,47,32,48},new int[]{-1,25,-3,35,-4,45,-2,38,-7,46});
    states[25] = new State(new int[]{8,26,9,53,24,-39,7,-39,25,-39,11,-39,16,-39});
    states[26] = new State(new int[]{10,30,34,39,31,47,32,48},new int[]{-3,27,-4,45,-2,38,-7,46});
    states[27] = new State(new int[]{13,28,12,36,18,-46,8,-46,9,-46,19,-46,23,-46,22,-46,20,-46,21,-46,24,-46,7,-46,25,-46,11,-46,16,-46});
    states[28] = new State(new int[]{10,30,34,39,31,47,32,48},new int[]{-4,29,-2,38,-7,46});
    states[29] = new State(-49);
    states[30] = new State(new int[]{33,21,10,30,34,39,31,47,32,48,26,49},new int[]{-8,31,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[31] = new State(new int[]{11,32,25,16});
    states[32] = new State(-52);
    states[33] = new State(new int[]{24,18,7,-32,25,-32,11,-32,16,-32});
    states[34] = new State(-34);
    states[35] = new State(new int[]{13,28,12,36,18,-48,8,-48,9,-48,19,-48,23,-48,22,-48,20,-48,21,-48,24,-48,7,-48,25,-48,11,-48,16,-48});
    states[36] = new State(new int[]{10,30,34,39,31,47,32,48},new int[]{-4,37,-2,38,-7,46});
    states[37] = new State(-50);
    states[38] = new State(-53);
    states[39] = new State(new int[]{10,40,13,-27,12,-27,18,-27,8,-27,9,-27,19,-27,23,-27,22,-27,20,-27,21,-27,24,-27,7,-27,25,-27,11,-27,16,-27});
    states[40] = new State(new int[]{11,51,33,21,10,30,34,39,31,47,32,48,26,49},new int[]{-25,41,-8,52,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[41] = new State(new int[]{11,42,16,43});
    states[42] = new State(-23);
    states[43] = new State(new int[]{33,21,10,30,34,39,31,47,32,48,26,49},new int[]{-8,44,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[44] = new State(new int[]{25,16,11,-26,16,-26});
    states[45] = new State(-51);
    states[46] = new State(-54);
    states[47] = new State(-55);
    states[48] = new State(-56);
    states[49] = new State(new int[]{33,21,10,30,34,39,31,47,32,48},new int[]{-10,50,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[50] = new State(-36);
    states[51] = new State(-24);
    states[52] = new State(new int[]{25,16,11,-25,16,-25});
    states[53] = new State(new int[]{10,30,34,39,31,47,32,48},new int[]{-3,54,-4,45,-2,38,-7,46});
    states[54] = new State(new int[]{13,28,12,36,18,-47,8,-47,9,-47,19,-47,23,-47,22,-47,20,-47,21,-47,24,-47,7,-47,25,-47,11,-47,16,-47});
    states[55] = new State(new int[]{10,30,34,39,31,47,32,48},new int[]{-1,56,-3,35,-4,45,-2,38,-7,46});
    states[56] = new State(new int[]{8,26,9,53,24,-40,7,-40,25,-40,11,-40,16,-40});
    states[57] = new State(new int[]{10,30,34,39,31,47,32,48},new int[]{-1,58,-3,35,-4,45,-2,38,-7,46});
    states[58] = new State(new int[]{8,26,9,53,24,-41,7,-41,25,-41,11,-41,16,-41});
    states[59] = new State(new int[]{10,30,34,39,31,47,32,48},new int[]{-1,60,-3,35,-4,45,-2,38,-7,46});
    states[60] = new State(new int[]{8,26,9,53,24,-42,7,-42,25,-42,11,-42,16,-42});
    states[61] = new State(new int[]{10,30,34,39,31,47,32,48},new int[]{-1,62,-3,35,-4,45,-2,38,-7,46});
    states[62] = new State(new int[]{8,26,9,53,24,-43,7,-43,25,-43,11,-43,16,-43});
    states[63] = new State(new int[]{10,30,34,39,31,47,32,48},new int[]{-1,64,-3,35,-4,45,-2,38,-7,46});
    states[64] = new State(new int[]{8,26,9,53,24,-44,7,-44,25,-44,11,-44,16,-44});
    states[65] = new State(new int[]{34,66,10,40,6,-27});
    states[66] = new State(new int[]{7,67});
    states[67] = new State(-22);
    states[68] = new State(-13);
    states[69] = new State(new int[]{10,70});
    states[70] = new State(new int[]{33,21,10,30,34,39,31,47,32,48,26,49},new int[]{-8,71,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[71] = new State(new int[]{11,72,25,16});
    states[72] = new State(new int[]{34,65,27,69,3,7,17,79,29,87,30,93,7,100},new int[]{-14,73,-13,11,-2,12,-17,68,-15,76,-22,77,-16,78,-18,83,-7,84,-19,86,-20,92});
    states[73] = new State(new int[]{28,74,4,-30,34,-30,27,-30,3,-30,17,-30,29,-30,30,-30,7,-30});
    states[74] = new State(new int[]{34,65,27,69,3,7,17,79,29,87,30,93,7,100},new int[]{-14,75,-13,11,-2,12,-17,68,-15,76,-22,77,-16,78,-18,83,-7,84,-19,86,-20,92});
    states[75] = new State(-29);
    states[76] = new State(-14);
    states[77] = new State(-15);
    states[78] = new State(-16);
    states[79] = new State(new int[]{7,82,33,21,10,30,34,39,31,47,32,48,26,49},new int[]{-8,80,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[80] = new State(new int[]{7,81,25,16});
    states[81] = new State(-60);
    states[82] = new State(-61);
    states[83] = new State(-17);
    states[84] = new State(new int[]{7,85});
    states[85] = new State(-21);
    states[86] = new State(-18);
    states[87] = new State(new int[]{10,88});
    states[88] = new State(new int[]{33,21,10,30,34,39,31,47,32,48,26,49},new int[]{-8,89,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[89] = new State(new int[]{11,90,25,16});
    states[90] = new State(new int[]{34,65,27,69,3,7,17,79,29,87,30,93,7,100},new int[]{-14,91,-13,11,-2,12,-17,68,-15,76,-22,77,-16,78,-18,83,-7,84,-19,86,-20,92});
    states[91] = new State(-58);
    states[92] = new State(-19);
    states[93] = new State(new int[]{34,65,27,69,3,7,17,79,29,87,30,93,7,100},new int[]{-14,94,-13,11,-2,12,-17,68,-15,76,-22,77,-16,78,-18,83,-7,84,-19,86,-20,92});
    states[94] = new State(new int[]{29,95});
    states[95] = new State(new int[]{10,96});
    states[96] = new State(new int[]{33,21,10,30,34,39,31,47,32,48,26,49},new int[]{-8,97,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[97] = new State(new int[]{11,98,25,16});
    states[98] = new State(new int[]{7,99});
    states[99] = new State(-59);
    states[100] = new State(-20);
    states[101] = new State(-10);
    states[102] = new State(new int[]{34,103});
    states[103] = new State(new int[]{10,104});
    states[104] = new State(new int[]{11,110,34,111},new int[]{-24,105});
    states[105] = new State(new int[]{11,106,16,107});
    states[106] = new State(-6);
    states[107] = new State(new int[]{34,108});
    states[108] = new State(new int[]{34,109});
    states[109] = new State(-9);
    states[110] = new State(-7);
    states[111] = new State(new int[]{34,112});
    states[112] = new State(-8);
    states[113] = new State(-3);

    rules[1] = new Rule(-27, new int[]{-26,2});
    rules[2] = new Rule(-26, new int[]{-6});
    rules[3] = new Rule(-6, new int[]{-5});
    rules[4] = new Rule(-6, new int[]{-6,-5});
    rules[5] = new Rule(-5, new int[]{-23,-22});
    rules[6] = new Rule(-23, new int[]{34,34,10,-24,11});
    rules[7] = new Rule(-23, new int[]{34,34,10,11});
    rules[8] = new Rule(-24, new int[]{34,34});
    rules[9] = new Rule(-24, new int[]{-24,16,34,34});
    rules[10] = new Rule(-21, new int[]{-14});
    rules[11] = new Rule(-21, new int[]{-21,-14});
    rules[12] = new Rule(-14, new int[]{-13});
    rules[13] = new Rule(-14, new int[]{-17});
    rules[14] = new Rule(-14, new int[]{-15});
    rules[15] = new Rule(-14, new int[]{-22});
    rules[16] = new Rule(-14, new int[]{-16});
    rules[17] = new Rule(-14, new int[]{-18});
    rules[18] = new Rule(-14, new int[]{-19});
    rules[19] = new Rule(-14, new int[]{-20});
    rules[20] = new Rule(-14, new int[]{7});
    rules[21] = new Rule(-18, new int[]{-7,7});
    rules[22] = new Rule(-15, new int[]{34,34,7});
    rules[23] = new Rule(-7, new int[]{34,10,-25,11});
    rules[24] = new Rule(-7, new int[]{34,10,11});
    rules[25] = new Rule(-25, new int[]{-8});
    rules[26] = new Rule(-25, new int[]{-25,16,-8});
    rules[27] = new Rule(-2, new int[]{34});
    rules[28] = new Rule(-13, new int[]{-2,6,-8,7});
    rules[29] = new Rule(-17, new int[]{27,10,-8,11,-14,28,-14});
    rules[30] = new Rule(-17, new int[]{27,10,-8,11,-14});
    rules[31] = new Rule(-8, new int[]{-8,25,-9});
    rules[32] = new Rule(-8, new int[]{-9});
    rules[33] = new Rule(-9, new int[]{-9,24,-11});
    rules[34] = new Rule(-9, new int[]{-11});
    rules[35] = new Rule(-11, new int[]{-10});
    rules[36] = new Rule(-11, new int[]{26,-10});
    rules[37] = new Rule(-10, new int[]{33});
    rules[38] = new Rule(-10, new int[]{-12});
    rules[39] = new Rule(-12, new int[]{-1,18,-1});
    rules[40] = new Rule(-12, new int[]{-1,19,-1});
    rules[41] = new Rule(-12, new int[]{-1,23,-1});
    rules[42] = new Rule(-12, new int[]{-1,22,-1});
    rules[43] = new Rule(-12, new int[]{-1,20,-1});
    rules[44] = new Rule(-12, new int[]{-1,21,-1});
    rules[45] = new Rule(-12, new int[]{-1});
    rules[46] = new Rule(-1, new int[]{-1,8,-3});
    rules[47] = new Rule(-1, new int[]{-1,9,-3});
    rules[48] = new Rule(-1, new int[]{-3});
    rules[49] = new Rule(-3, new int[]{-3,13,-4});
    rules[50] = new Rule(-3, new int[]{-3,12,-4});
    rules[51] = new Rule(-3, new int[]{-4});
    rules[52] = new Rule(-4, new int[]{10,-8,11});
    rules[53] = new Rule(-4, new int[]{-2});
    rules[54] = new Rule(-4, new int[]{-7});
    rules[55] = new Rule(-4, new int[]{31});
    rules[56] = new Rule(-4, new int[]{32});
    rules[57] = new Rule(-22, new int[]{3,-21,4});
    rules[58] = new Rule(-19, new int[]{29,10,-8,11,-14});
    rules[59] = new Rule(-20, new int[]{30,-14,29,10,-8,11,7});
    rules[60] = new Rule(-16, new int[]{17,-8,7});
    rules[61] = new Rule(-16, new int[]{17,7});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> fun_list
{ root = ValueStack[ValueStack.Depth-1].eVal as MainProgramNode; }
        break;
      case 3: // fun_list -> function
{ CurrentSemanticValue.eVal = new MainProgramNode(ValueStack[ValueStack.Depth-1].eVal as FunNode); }
        break;
      case 4: // fun_list -> fun_list, function
{ (ValueStack[ValueStack.Depth-2].eVal as MainProgramNode).Add(ValueStack[ValueStack.Depth-1].eVal as FunNode); CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-2].eVal; }
        break;
      case 5: // function -> fun_header, block
{ CurrentSemanticValue.eVal = new FunNode(ValueStack[ValueStack.Depth-2].fHead, ValueStack[ValueStack.Depth-1].blVal); }
        break;
      case 6: // fun_header -> ID, ID, LEFT_BRACKET, arguments, RIGHT_BRACKET
{ CurrentSemanticValue.fHead = new FunHeader(ValueStack[ValueStack.Depth-5].sVal, ValueStack[ValueStack.Depth-4].sVal, ValueStack[ValueStack.Depth-2].args); }
        break;
      case 7: // fun_header -> ID, ID, LEFT_BRACKET, RIGHT_BRACKET
{ CurrentSemanticValue.fHead = new FunHeader(ValueStack[ValueStack.Depth-4].sVal, ValueStack[ValueStack.Depth-3].sVal, null); }
        break;
      case 8: // arguments -> ID, ID
{ CurrentSemanticValue.args = new Arguments(ValueStack[ValueStack.Depth-2].sVal, ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 9: // arguments -> arguments, COMMA, ID, ID
{
			  ValueStack[ValueStack.Depth-4].args.Add(ValueStack[ValueStack.Depth-2].sVal,ValueStack[ValueStack.Depth-1].sVal);
			  CurrentSemanticValue.args = ValueStack[ValueStack.Depth-4].args; 
			}
        break;
      case 10: // stlist -> statement
{ 
				CurrentSemanticValue.blVal = new BlockNode(ValueStack[ValueStack.Depth-1].stVal); 
			}
        break;
      case 11: // stlist -> stlist, statement
{ 
				if (ValueStack[ValueStack.Depth-1].stVal != null)
				{
					ValueStack[ValueStack.Depth-2].blVal.Add(ValueStack[ValueStack.Depth-1].stVal);
			    }
				CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; 
			}
        break;
      case 12: // statement -> assign
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 13: // statement -> cond
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 14: // statement -> decl
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 15: // statement -> block
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 16: // statement -> return
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 17: // statement -> proc
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 18: // statement -> while_cycle
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 19: // statement -> do_while_cycle
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 20: // statement -> SEMICOLON
{ CurrentSemanticValue.stVal = null; }
        break;
      case 21: // proc -> fun_call, SEMICOLON
{ CurrentSemanticValue.stVal = new ProcCallNode(ValueStack[ValueStack.Depth-2].eVal as FunCallNode); }
        break;
      case 22: // decl -> ID, ID, SEMICOLON
{ CurrentSemanticValue.stVal = new DeclNode(ValueStack[ValueStack.Depth-3].sVal, ValueStack[ValueStack.Depth-2].sVal); }
        break;
      case 23: // fun_call -> ID, LEFT_BRACKET, expr_list, RIGHT_BRACKET
{ CurrentSemanticValue.eVal = new FunCallNode(ValueStack[ValueStack.Depth-4].sVal, ValueStack[ValueStack.Depth-2].eList); }
        break;
      case 24: // fun_call -> ID, LEFT_BRACKET, RIGHT_BRACKET
{ CurrentSemanticValue.eVal = new FunCallNode(ValueStack[ValueStack.Depth-3].sVal); }
        break;
      case 25: // expr_list -> b_expr
{ CurrentSemanticValue.eList = new List<ExprNode>();
					CurrentSemanticValue.eList.Add(ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 26: // expr_list -> expr_list, COMMA, b_expr
{
			  ValueStack[ValueStack.Depth-3].eList.Add(ValueStack[ValueStack.Depth-1].eVal);
			  CurrentSemanticValue.eList = ValueStack[ValueStack.Depth-3].eList; 
			}
        break;
      case 27: // ident -> ID
{ CurrentSemanticValue.eVal = new IdNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 28: // assign -> ident, ASSIGN, b_expr, SEMICOLON
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-4].eVal as IdNode, ValueStack[ValueStack.Depth-2].eVal); }
        break;
      case 29: // cond -> IF, LEFT_BRACKET, b_expr, RIGHT_BRACKET, statement, ELSE, statement
{ CurrentSemanticValue.stVal = new CondNode(ValueStack[ValueStack.Depth-5].eVal, ValueStack[ValueStack.Depth-3].stVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 30: // cond -> IF, LEFT_BRACKET, b_expr, RIGHT_BRACKET, statement
{ CurrentSemanticValue.stVal = new CondNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal, null); }
        break;
      case 31: // b_expr -> b_expr, OR, b_term
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Or); }
        break;
      case 32: // b_expr -> b_term
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 33: // b_term -> b_term, AND, not_factor
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.And); }
        break;
      case 34: // b_term -> not_factor
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 35: // not_factor -> b_factor
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 36: // not_factor -> NOT, b_factor
{ CurrentSemanticValue.eVal = new UnExprNode(ValueStack[ValueStack.Depth-1].eVal, OpType.Not); }
        break;
      case 37: // b_factor -> BVAL
{ CurrentSemanticValue.eVal = new BoolNode(ValueStack[ValueStack.Depth-1].bVal); }
        break;
      case 38: // b_factor -> relation
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 39: // relation -> expr, GT, expr
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Gt); }
        break;
      case 40: // relation -> expr, LT, expr
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Lt); }
        break;
      case 41: // relation -> expr, LET, expr
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Let); }
        break;
      case 42: // relation -> expr, GET, expr
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Get); }
        break;
      case 43: // relation -> expr, EQ, expr
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Eq); }
        break;
      case 44: // relation -> expr, NEQ, expr
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Neq); }
        break;
      case 45: // relation -> expr
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 46: // expr -> expr, PLUS, term
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Plus); }
        break;
      case 47: // expr -> expr, MINUS, term
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Minus); }
        break;
      case 48: // expr -> term
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 49: // term -> term, MULT, factor
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Mult); }
        break;
      case 50: // term -> term, DIV, factor
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Div); }
        break;
      case 51: // term -> factor
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 52: // factor -> LEFT_BRACKET, b_expr, RIGHT_BRACKET
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-2].eVal; }
        break;
      case 53: // factor -> ident
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as IdNode; }
        break;
      case 54: // factor -> fun_call
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as FunCallNode; }
        break;
      case 55: // factor -> INUM
{ CurrentSemanticValue.eVal = new IntNumNode(ValueStack[ValueStack.Depth-1].iVal); }
        break;
      case 56: // factor -> DNUM
{ CurrentSemanticValue.eVal = new DoubleNumNode(ValueStack[ValueStack.Depth-1].dVal); }
        break;
      case 57: // block -> BEGIN, stlist, END
{ CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 58: // while_cycle -> WHILE, LEFT_BRACKET, b_expr, RIGHT_BRACKET, statement
{ CurrentSemanticValue.stVal = new WhileNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 59: // do_while_cycle -> DO, statement, WHILE, LEFT_BRACKET, b_expr, RIGHT_BRACKET, 
               //                   SEMICOLON
{ CurrentSemanticValue.stVal = new DoWhileNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-6].stVal); }
        break;
      case 60: // return -> RETURN, b_expr, SEMICOLON
{ CurrentSemanticValue.stVal = new ReturnNode(ValueStack[ValueStack.Depth-2].eVal); }
        break;
      case 61: // return -> RETURN, SEMICOLON
{ CurrentSemanticValue.stVal = new ReturnNode(); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
