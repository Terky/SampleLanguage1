// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-32TFS7K
// DateTime: 08.12.2017 17:54:25
// UserName: wowit
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using ProgramTree;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,ASSIGN=6,
    SEMICOLON=7,PLUS=8,MINUS=9,LEFT_BRACKET=10,RIGHT_BRACKET=11,DIV=12,
    MULT=13,VAR=14,COLON=15,COMMA=16,RETURN=17,GT=18,
    LT=19,EQ=20,NEQ=21,GET=22,LET=23,AND=24,
    OR=25,NOT=26,IF=27,ELSE=28,WHILE=29,DO=30,
    FOR=31,INUM=32,DNUM=33,BVAL=34,ID=35};

public struct ValueType
{ 
			public bool bVal;
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
			public FunHeader fHead;
            public DeclId declId;
            public DeclType declType;
			public FormalParams formParams;
			public List<ExprNode> eList;
			public DeclAssign declAssign;
            public DeclList declList;
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// This defenition goes to class GPPGParser, which is a parser, that generated by gppg system
    public MainProgramNode root; // Syntax tree root 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[77];
  private static State[] states = new State[139];
  private static string[] nonTerms = new string[] {
      "arithm_expr", "ident", "arithm_term", "arithm_factor", "function", "fun_list", 
      "fun_call", "bool_expr", "bool_term", "bool_factor", "not_factor", "relation", 
      "return_expr", "assign", "statement", "decl", "return", "cond", "proc_call", 
      "while_cycle", "do_while_cycle", "for_cycle", "for_initializer", "for_statement", 
      "stlist", "block", "fun_header", "formal_params", "formal_params_fill", 
      "actual_params", "actual_params_fill", "decl_id", "type", "decl_assign", 
      "decl_list", "progr", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{35,135},new int[]{-36,1,-6,3,-5,138,-27,5,-33,126});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{35,135,2,-2},new int[]{-5,4,-27,5,-33,126});
    states[4] = new State(-4);
    states[5] = new State(new int[]{3,7},new int[]{-26,6});
    states[6] = new State(-5);
    states[7] = new State(new int[]{35,65,27,67,3,7,17,89,29,96,30,103,31,110,7,119},new int[]{-25,8,-15,125,-14,11,-2,13,-18,66,-16,74,-33,76,-26,86,-17,87,-19,92,-7,94,-20,95,-21,101,-22,109});
    states[8] = new State(new int[]{4,9,35,65,27,67,3,7,17,89,29,96,30,103,31,110,7,119},new int[]{-15,10,-14,11,-2,13,-18,66,-16,74,-33,76,-26,86,-17,87,-19,92,-7,94,-20,95,-21,101,-22,109});
    states[9] = new State(-66);
    states[10] = new State(-13);
    states[11] = new State(new int[]{7,12});
    states[12] = new State(-14);
    states[13] = new State(new int[]{6,14});
    states[14] = new State(new int[]{34,21,10,30,35,39,32,47,33,48,26,49},new int[]{-8,15,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[15] = new State(new int[]{25,16,7,-37,11,-37});
    states[16] = new State(new int[]{34,21,10,30,35,39,32,47,33,48,26,49},new int[]{-9,17,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[17] = new State(new int[]{24,18,25,-40,7,-40,11,-40,16,-40});
    states[18] = new State(new int[]{34,21,10,30,35,39,32,47,33,48,26,49},new int[]{-11,19,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[19] = new State(-42);
    states[20] = new State(-44);
    states[21] = new State(-46);
    states[22] = new State(-47);
    states[23] = new State(new int[]{18,24,8,26,9,53,19,55,23,57,22,59,20,61,21,63,24,-54,25,-54,7,-54,11,-54,16,-54});
    states[24] = new State(new int[]{10,30,35,39,32,47,33,48},new int[]{-1,25,-3,35,-4,45,-2,38,-7,46});
    states[25] = new State(new int[]{8,26,9,53,24,-48,25,-48,7,-48,11,-48,16,-48});
    states[26] = new State(new int[]{10,30,35,39,32,47,33,48},new int[]{-3,27,-4,45,-2,38,-7,46});
    states[27] = new State(new int[]{13,28,12,36,18,-55,8,-55,9,-55,19,-55,23,-55,22,-55,20,-55,21,-55,24,-55,25,-55,7,-55,11,-55,16,-55});
    states[28] = new State(new int[]{10,30,35,39,32,47,33,48},new int[]{-4,29,-2,38,-7,46});
    states[29] = new State(-58);
    states[30] = new State(new int[]{34,21,10,30,35,39,32,47,33,48,26,49},new int[]{-8,31,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[31] = new State(new int[]{11,32,25,16});
    states[32] = new State(-61);
    states[33] = new State(new int[]{24,18,25,-41,7,-41,11,-41,16,-41});
    states[34] = new State(-43);
    states[35] = new State(new int[]{13,28,12,36,18,-57,8,-57,9,-57,19,-57,23,-57,22,-57,20,-57,21,-57,24,-57,25,-57,7,-57,11,-57,16,-57});
    states[36] = new State(new int[]{10,30,35,39,32,47,33,48},new int[]{-4,37,-2,38,-7,46});
    states[37] = new State(-59);
    states[38] = new State(-62);
    states[39] = new State(new int[]{10,40,13,-35,12,-35,18,-35,8,-35,9,-35,19,-35,23,-35,22,-35,20,-35,21,-35,24,-35,25,-35,7,-35,11,-35,16,-35,6,-35});
    states[40] = new State(new int[]{34,21,10,30,35,39,32,47,33,48,26,49,11,-32,16,-32},new int[]{-30,41,-31,51,-8,52,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[41] = new State(new int[]{11,42,16,43});
    states[42] = new State(-30);
    states[43] = new State(new int[]{34,21,10,30,35,39,32,47,33,48,26,49},new int[]{-8,44,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[44] = new State(new int[]{25,16,11,-34,16,-34});
    states[45] = new State(-60);
    states[46] = new State(-63);
    states[47] = new State(-64);
    states[48] = new State(-65);
    states[49] = new State(new int[]{34,21,10,30,35,39,32,47,33,48},new int[]{-10,50,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[50] = new State(-45);
    states[51] = new State(-31);
    states[52] = new State(new int[]{25,16,11,-33,16,-33});
    states[53] = new State(new int[]{10,30,35,39,32,47,33,48},new int[]{-3,54,-4,45,-2,38,-7,46});
    states[54] = new State(new int[]{13,28,12,36,18,-56,8,-56,9,-56,19,-56,23,-56,22,-56,20,-56,21,-56,24,-56,25,-56,7,-56,11,-56,16,-56});
    states[55] = new State(new int[]{10,30,35,39,32,47,33,48},new int[]{-1,56,-3,35,-4,45,-2,38,-7,46});
    states[56] = new State(new int[]{8,26,9,53,24,-49,25,-49,7,-49,11,-49,16,-49});
    states[57] = new State(new int[]{10,30,35,39,32,47,33,48},new int[]{-1,58,-3,35,-4,45,-2,38,-7,46});
    states[58] = new State(new int[]{8,26,9,53,24,-50,25,-50,7,-50,11,-50,16,-50});
    states[59] = new State(new int[]{10,30,35,39,32,47,33,48},new int[]{-1,60,-3,35,-4,45,-2,38,-7,46});
    states[60] = new State(new int[]{8,26,9,53,24,-51,25,-51,7,-51,11,-51,16,-51});
    states[61] = new State(new int[]{10,30,35,39,32,47,33,48},new int[]{-1,62,-3,35,-4,45,-2,38,-7,46});
    states[62] = new State(new int[]{8,26,9,53,24,-52,25,-52,7,-52,11,-52,16,-52});
    states[63] = new State(new int[]{10,30,35,39,32,47,33,48},new int[]{-1,64,-3,35,-4,45,-2,38,-7,46});
    states[64] = new State(new int[]{8,26,9,53,24,-53,25,-53,7,-53,11,-53,16,-53});
    states[65] = new State(new int[]{10,40,6,-35,35,-36});
    states[66] = new State(-15);
    states[67] = new State(new int[]{10,68});
    states[68] = new State(new int[]{34,21,10,30,35,39,32,47,33,48,26,49},new int[]{-8,69,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[69] = new State(new int[]{11,70,25,16});
    states[70] = new State(new int[]{35,65,27,67,3,7,17,89,29,96,30,103,31,110,7,119},new int[]{-15,71,-14,11,-2,13,-18,66,-16,74,-33,76,-26,86,-17,87,-19,92,-7,94,-20,95,-21,101,-22,109});
    states[71] = new State(new int[]{28,72,4,-39,35,-39,27,-39,3,-39,17,-39,29,-39,30,-39,31,-39,7,-39});
    states[72] = new State(new int[]{35,65,27,67,3,7,17,89,29,96,30,103,31,110,7,119},new int[]{-15,73,-14,11,-2,13,-18,66,-16,74,-33,76,-26,86,-17,87,-19,92,-7,94,-20,95,-21,101,-22,109});
    states[73] = new State(-38);
    states[74] = new State(new int[]{7,75});
    states[75] = new State(-16);
    states[76] = new State(new int[]{35,83},new int[]{-35,77,-32,84});
    states[77] = new State(new int[]{16,78,7,-25});
    states[78] = new State(new int[]{35,83},new int[]{-32,79});
    states[79] = new State(new int[]{6,81,16,-29,7,-29},new int[]{-34,80});
    states[80] = new State(-26);
    states[81] = new State(new int[]{34,21,10,30,35,39,32,47,33,48,26,49},new int[]{-8,82,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[82] = new State(new int[]{25,16,16,-28,7,-28});
    states[83] = new State(-6);
    states[84] = new State(new int[]{6,81,16,-29,7,-29},new int[]{-34,85});
    states[85] = new State(-27);
    states[86] = new State(-17);
    states[87] = new State(new int[]{7,88});
    states[88] = new State(-18);
    states[89] = new State(new int[]{34,21,10,30,35,39,32,47,33,48,26,49,7,-76},new int[]{-13,90,-8,91,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[90] = new State(-74);
    states[91] = new State(new int[]{25,16,7,-75});
    states[92] = new State(new int[]{7,93});
    states[93] = new State(-19);
    states[94] = new State(-24);
    states[95] = new State(-20);
    states[96] = new State(new int[]{10,97});
    states[97] = new State(new int[]{34,21,10,30,35,39,32,47,33,48,26,49},new int[]{-8,98,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[98] = new State(new int[]{11,99,25,16});
    states[99] = new State(new int[]{35,65,27,67,3,7,17,89,29,96,30,103,31,110,7,119},new int[]{-15,100,-14,11,-2,13,-18,66,-16,74,-33,76,-26,86,-17,87,-19,92,-7,94,-20,95,-21,101,-22,109});
    states[100] = new State(-67);
    states[101] = new State(new int[]{7,102});
    states[102] = new State(-21);
    states[103] = new State(new int[]{35,65,27,67,3,7,17,89,29,96,30,103,31,110,7,119},new int[]{-15,104,-14,11,-2,13,-18,66,-16,74,-33,76,-26,86,-17,87,-19,92,-7,94,-20,95,-21,101,-22,109});
    states[104] = new State(new int[]{29,105});
    states[105] = new State(new int[]{10,106});
    states[106] = new State(new int[]{34,21,10,30,35,39,32,47,33,48,26,49},new int[]{-8,107,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[107] = new State(new int[]{11,108,25,16});
    states[108] = new State(-68);
    states[109] = new State(-22);
    states[110] = new State(new int[]{10,111});
    states[111] = new State(new int[]{35,123},new int[]{-23,112,-16,122,-33,76,-14,124,-2,13});
    states[112] = new State(new int[]{7,113});
    states[113] = new State(new int[]{34,21,10,30,35,39,32,47,33,48,26,49},new int[]{-8,114,-9,33,-11,34,-10,20,-12,22,-1,23,-3,35,-4,45,-2,38,-7,46});
    states[114] = new State(new int[]{7,115,25,16});
    states[115] = new State(new int[]{35,39},new int[]{-24,116,-14,120,-2,13,-19,121,-7,94});
    states[116] = new State(new int[]{11,117});
    states[117] = new State(new int[]{35,65,27,67,3,7,17,89,29,96,30,103,31,110,7,119},new int[]{-15,118,-14,11,-2,13,-18,66,-16,74,-33,76,-26,86,-17,87,-19,92,-7,94,-20,95,-21,101,-22,109});
    states[118] = new State(-69);
    states[119] = new State(-23);
    states[120] = new State(-72);
    states[121] = new State(-73);
    states[122] = new State(-70);
    states[123] = new State(new int[]{35,-36,6,-35});
    states[124] = new State(-71);
    states[125] = new State(-12);
    states[126] = new State(new int[]{35,83},new int[]{-32,127});
    states[127] = new State(new int[]{10,128});
    states[128] = new State(new int[]{35,135,11,-9},new int[]{-28,129,-29,131,-33,136});
    states[129] = new State(new int[]{11,130});
    states[130] = new State(-7);
    states[131] = new State(new int[]{16,132,11,-8});
    states[132] = new State(new int[]{35,135},new int[]{-33,133});
    states[133] = new State(new int[]{35,83},new int[]{-32,134});
    states[134] = new State(-11);
    states[135] = new State(-36);
    states[136] = new State(new int[]{35,83},new int[]{-32,137});
    states[137] = new State(-10);
    states[138] = new State(-3);

    rules[1] = new Rule(-37, new int[]{-36,2});
    rules[2] = new Rule(-36, new int[]{-6});
    rules[3] = new Rule(-6, new int[]{-5});
    rules[4] = new Rule(-6, new int[]{-6,-5});
    rules[5] = new Rule(-5, new int[]{-27,-26});
    rules[6] = new Rule(-32, new int[]{35});
    rules[7] = new Rule(-27, new int[]{-33,-32,10,-28,11});
    rules[8] = new Rule(-28, new int[]{-29});
    rules[9] = new Rule(-28, new int[]{});
    rules[10] = new Rule(-29, new int[]{-33,-32});
    rules[11] = new Rule(-29, new int[]{-29,16,-33,-32});
    rules[12] = new Rule(-25, new int[]{-15});
    rules[13] = new Rule(-25, new int[]{-25,-15});
    rules[14] = new Rule(-15, new int[]{-14,7});
    rules[15] = new Rule(-15, new int[]{-18});
    rules[16] = new Rule(-15, new int[]{-16,7});
    rules[17] = new Rule(-15, new int[]{-26});
    rules[18] = new Rule(-15, new int[]{-17,7});
    rules[19] = new Rule(-15, new int[]{-19,7});
    rules[20] = new Rule(-15, new int[]{-20});
    rules[21] = new Rule(-15, new int[]{-21,7});
    rules[22] = new Rule(-15, new int[]{-22});
    rules[23] = new Rule(-15, new int[]{7});
    rules[24] = new Rule(-19, new int[]{-7});
    rules[25] = new Rule(-16, new int[]{-33,-35});
    rules[26] = new Rule(-35, new int[]{-35,16,-32,-34});
    rules[27] = new Rule(-35, new int[]{-32,-34});
    rules[28] = new Rule(-34, new int[]{6,-8});
    rules[29] = new Rule(-34, new int[]{});
    rules[30] = new Rule(-7, new int[]{35,10,-30,11});
    rules[31] = new Rule(-30, new int[]{-31});
    rules[32] = new Rule(-30, new int[]{});
    rules[33] = new Rule(-31, new int[]{-8});
    rules[34] = new Rule(-31, new int[]{-30,16,-8});
    rules[35] = new Rule(-2, new int[]{35});
    rules[36] = new Rule(-33, new int[]{35});
    rules[37] = new Rule(-14, new int[]{-2,6,-8});
    rules[38] = new Rule(-18, new int[]{27,10,-8,11,-15,28,-15});
    rules[39] = new Rule(-18, new int[]{27,10,-8,11,-15});
    rules[40] = new Rule(-8, new int[]{-8,25,-9});
    rules[41] = new Rule(-8, new int[]{-9});
    rules[42] = new Rule(-9, new int[]{-9,24,-11});
    rules[43] = new Rule(-9, new int[]{-11});
    rules[44] = new Rule(-11, new int[]{-10});
    rules[45] = new Rule(-11, new int[]{26,-10});
    rules[46] = new Rule(-10, new int[]{34});
    rules[47] = new Rule(-10, new int[]{-12});
    rules[48] = new Rule(-12, new int[]{-1,18,-1});
    rules[49] = new Rule(-12, new int[]{-1,19,-1});
    rules[50] = new Rule(-12, new int[]{-1,23,-1});
    rules[51] = new Rule(-12, new int[]{-1,22,-1});
    rules[52] = new Rule(-12, new int[]{-1,20,-1});
    rules[53] = new Rule(-12, new int[]{-1,21,-1});
    rules[54] = new Rule(-12, new int[]{-1});
    rules[55] = new Rule(-1, new int[]{-1,8,-3});
    rules[56] = new Rule(-1, new int[]{-1,9,-3});
    rules[57] = new Rule(-1, new int[]{-3});
    rules[58] = new Rule(-3, new int[]{-3,13,-4});
    rules[59] = new Rule(-3, new int[]{-3,12,-4});
    rules[60] = new Rule(-3, new int[]{-4});
    rules[61] = new Rule(-4, new int[]{10,-8,11});
    rules[62] = new Rule(-4, new int[]{-2});
    rules[63] = new Rule(-4, new int[]{-7});
    rules[64] = new Rule(-4, new int[]{32});
    rules[65] = new Rule(-4, new int[]{33});
    rules[66] = new Rule(-26, new int[]{3,-25,4});
    rules[67] = new Rule(-20, new int[]{29,10,-8,11,-15});
    rules[68] = new Rule(-21, new int[]{30,-15,29,10,-8,11});
    rules[69] = new Rule(-22, new int[]{31,10,-23,7,-8,7,-24,11,-15});
    rules[70] = new Rule(-23, new int[]{-16});
    rules[71] = new Rule(-23, new int[]{-14});
    rules[72] = new Rule(-24, new int[]{-14});
    rules[73] = new Rule(-24, new int[]{-19});
    rules[74] = new Rule(-17, new int[]{17,-13});
    rules[75] = new Rule(-13, new int[]{-8});
    rules[76] = new Rule(-13, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> fun_list
{ root = ValueStack[ValueStack.Depth-1].eVal as MainProgramNode; }
        break;
      case 3: // fun_list -> function
{ CurrentSemanticValue.eVal = new MainProgramNode(ValueStack[ValueStack.Depth-1].eVal as FunNode, CurrentLocationSpan); }
        break;
      case 4: // fun_list -> fun_list, function
{ (ValueStack[ValueStack.Depth-2].eVal as MainProgramNode).Add(ValueStack[ValueStack.Depth-1].eVal as FunNode); CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-2].eVal; }
        break;
      case 5: // function -> fun_header, block
{ CurrentSemanticValue.eVal = new FunNode(ValueStack[ValueStack.Depth-2].fHead, ValueStack[ValueStack.Depth-1].blVal, CurrentLocationSpan); }
        break;
      case 6: // decl_id -> ID
{ CurrentSemanticValue.declId = new DeclId(ValueStack[ValueStack.Depth-1].sVal, CurrentLocationSpan); }
        break;
      case 7: // fun_header -> type, decl_id, LEFT_BRACKET, formal_params, RIGHT_BRACKET
{ CurrentSemanticValue.fHead = new FunHeader(ValueStack[ValueStack.Depth-5].declType, ValueStack[ValueStack.Depth-4].declId, ValueStack[ValueStack.Depth-2].formParams, CurrentLocationSpan); }
        break;
      case 8: // formal_params -> formal_params_fill
{ CurrentSemanticValue.formParams = ValueStack[ValueStack.Depth-1].formParams; }
        break;
      case 10: // formal_params_fill -> type, decl_id
{ CurrentSemanticValue.formParams = new FormalParams(ValueStack[ValueStack.Depth-2].declType, ValueStack[ValueStack.Depth-1].declId, CurrentLocationSpan); }
        break;
      case 11: // formal_params_fill -> formal_params_fill, COMMA, type, decl_id
{
		    ValueStack[ValueStack.Depth-4].formParams.Add(ValueStack[ValueStack.Depth-2].declType,ValueStack[ValueStack.Depth-1].declId);
			CurrentSemanticValue.formParams = ValueStack[ValueStack.Depth-4].formParams; 
		}
        break;
      case 12: // stlist -> statement
{ CurrentSemanticValue.blVal = new BlockNode(ValueStack[ValueStack.Depth-1].stVal, CurrentLocationSpan); }
        break;
      case 13: // stlist -> stlist, statement
{ 
		    if (ValueStack[ValueStack.Depth-1].stVal != null)
            {
			    ValueStack[ValueStack.Depth-2].blVal.Add(ValueStack[ValueStack.Depth-1].stVal);
            }
			CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; 
		}
        break;
      case 14: // statement -> assign, SEMICOLON
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-2].stVal; }
        break;
      case 15: // statement -> cond
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 16: // statement -> decl, SEMICOLON
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-2].stVal; }
        break;
      case 17: // statement -> block
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 18: // statement -> return, SEMICOLON
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-2].stVal; }
        break;
      case 19: // statement -> proc_call, SEMICOLON
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-2].stVal; }
        break;
      case 20: // statement -> while_cycle
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 21: // statement -> do_while_cycle, SEMICOLON
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-2].stVal; }
        break;
      case 22: // statement -> for_cycle
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 23: // statement -> SEMICOLON
{ CurrentSemanticValue.stVal = null; }
        break;
      case 24: // proc_call -> fun_call
{ CurrentSemanticValue.stVal = new ProcCallNode(ValueStack[ValueStack.Depth-1].eVal as FunCallNode, CurrentLocationSpan); }
        break;
      case 25: // decl -> type, decl_list
{ CurrentSemanticValue.stVal = new DeclNode(ValueStack[ValueStack.Depth-2].declType, ValueStack[ValueStack.Depth-1].declList, CurrentLocationSpan); }
        break;
      case 26: // decl_list -> decl_list, COMMA, decl_id, decl_assign
{ (ValueStack[ValueStack.Depth-4].declList as DeclList).Add(ValueStack[ValueStack.Depth-2].declId, ValueStack[ValueStack.Depth-1].declAssign); CurrentSemanticValue.declList = ValueStack[ValueStack.Depth-4].declList; }
        break;
      case 27: // decl_list -> decl_id, decl_assign
{ CurrentSemanticValue.declList = new DeclList(ValueStack[ValueStack.Depth-2].declId, ValueStack[ValueStack.Depth-1].declAssign, CurrentLocationSpan); }
        break;
      case 28: // decl_assign -> ASSIGN, bool_expr
{ CurrentSemanticValue.declAssign = new DeclAssign(ValueStack[ValueStack.Depth-1].eVal, CurrentLocationSpan); }
        break;
      case 30: // fun_call -> ID, LEFT_BRACKET, actual_params, RIGHT_BRACKET
{ CurrentSemanticValue.eVal = new FunCallNode(ValueStack[ValueStack.Depth-4].sVal, ValueStack[ValueStack.Depth-2].eList, CurrentLocationSpan); }
        break;
      case 31: // actual_params -> actual_params_fill
{ CurrentSemanticValue.eList = ValueStack[ValueStack.Depth-1].eList; }
        break;
      case 32: // actual_params -> /* empty */
{ CurrentSemanticValue.eList = null; }
        break;
      case 33: // actual_params_fill -> bool_expr
{
            CurrentSemanticValue.eList = new List<ExprNode>();
		    CurrentSemanticValue.eList.Add(ValueStack[ValueStack.Depth-1].eVal);
        }
        break;
      case 34: // actual_params_fill -> actual_params, COMMA, bool_expr
{
		    ValueStack[ValueStack.Depth-3].eList.Add(ValueStack[ValueStack.Depth-1].eVal);
			CurrentSemanticValue.eList = ValueStack[ValueStack.Depth-3].eList; 
		}
        break;
      case 35: // ident -> ID
{ CurrentSemanticValue.eVal = new IdNode(ValueStack[ValueStack.Depth-1].sVal, CurrentLocationSpan); }
        break;
      case 36: // type -> ID
{ CurrentSemanticValue.declType = new DeclType(ValueStack[ValueStack.Depth-1].sVal, CurrentLocationSpan); }
        break;
      case 37: // assign -> ident, ASSIGN, bool_expr
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].eVal, CurrentLocationSpan); }
        break;
      case 38: // cond -> IF, LEFT_BRACKET, bool_expr, RIGHT_BRACKET, statement, ELSE, statement
{ CurrentSemanticValue.stVal = new CondNode(ValueStack[ValueStack.Depth-5].eVal, ValueStack[ValueStack.Depth-3].stVal, ValueStack[ValueStack.Depth-1].stVal, CurrentLocationSpan); }
        break;
      case 39: // cond -> IF, LEFT_BRACKET, bool_expr, RIGHT_BRACKET, statement
{ CurrentSemanticValue.stVal = new CondNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal, null, CurrentLocationSpan); }
        break;
      case 40: // bool_expr -> bool_expr, OR, bool_term
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Or, CurrentLocationSpan); }
        break;
      case 41: // bool_expr -> bool_term
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 42: // bool_term -> bool_term, AND, not_factor
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.And, CurrentLocationSpan); }
        break;
      case 43: // bool_term -> not_factor
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 44: // not_factor -> bool_factor
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 45: // not_factor -> NOT, bool_factor
{ CurrentSemanticValue.eVal = new UnExprNode(ValueStack[ValueStack.Depth-1].eVal, OpType.Not, CurrentLocationSpan); }
        break;
      case 46: // bool_factor -> BVAL
{ CurrentSemanticValue.eVal = new BoolNode(ValueStack[ValueStack.Depth-1].bVal, CurrentLocationSpan); }
        break;
      case 47: // bool_factor -> relation
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 48: // relation -> arithm_expr, GT, arithm_expr
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Gt, CurrentLocationSpan); }
        break;
      case 49: // relation -> arithm_expr, LT, arithm_expr
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Lt, CurrentLocationSpan); }
        break;
      case 50: // relation -> arithm_expr, LET, arithm_expr
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Let, CurrentLocationSpan); }
        break;
      case 51: // relation -> arithm_expr, GET, arithm_expr
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Get, CurrentLocationSpan); }
        break;
      case 52: // relation -> arithm_expr, EQ, arithm_expr
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Eq, CurrentLocationSpan); }
        break;
      case 53: // relation -> arithm_expr, NEQ, arithm_expr
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Neq, CurrentLocationSpan); }
        break;
      case 54: // relation -> arithm_expr
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 55: // arithm_expr -> arithm_expr, PLUS, arithm_term
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Plus, CurrentLocationSpan); }
        break;
      case 56: // arithm_expr -> arithm_expr, MINUS, arithm_term
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Minus, CurrentLocationSpan); }
        break;
      case 57: // arithm_expr -> arithm_term
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 58: // arithm_term -> arithm_term, MULT, arithm_factor
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Mult, CurrentLocationSpan); }
        break;
      case 59: // arithm_term -> arithm_term, DIV, arithm_factor
{ CurrentSemanticValue.eVal = new BinExprNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OpType.Div, CurrentLocationSpan); }
        break;
      case 60: // arithm_term -> arithm_factor
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 61: // arithm_factor -> LEFT_BRACKET, bool_expr, RIGHT_BRACKET
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-2].eVal; }
        break;
      case 62: // arithm_factor -> ident
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as IdNode; }
        break;
      case 63: // arithm_factor -> fun_call
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as FunCallNode; }
        break;
      case 64: // arithm_factor -> INUM
{ CurrentSemanticValue.eVal = new IntNumNode(ValueStack[ValueStack.Depth-1].iVal, CurrentLocationSpan); }
        break;
      case 65: // arithm_factor -> DNUM
{ CurrentSemanticValue.eVal = new DoubleNumNode(ValueStack[ValueStack.Depth-1].dVal, CurrentLocationSpan); }
        break;
      case 66: // block -> BEGIN, stlist, END
{ CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 67: // while_cycle -> WHILE, LEFT_BRACKET, bool_expr, RIGHT_BRACKET, statement
{ CurrentSemanticValue.stVal = new WhileNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal, CurrentLocationSpan); }
        break;
      case 68: // do_while_cycle -> DO, statement, WHILE, LEFT_BRACKET, bool_expr, RIGHT_BRACKET
{ CurrentSemanticValue.stVal = new DoWhileNode(ValueStack[ValueStack.Depth-2].eVal, ValueStack[ValueStack.Depth-5].stVal, CurrentLocationSpan); }
        break;
      case 69: // for_cycle -> FOR, LEFT_BRACKET, for_initializer, SEMICOLON, bool_expr, 
               //              SEMICOLON, for_statement, RIGHT_BRACKET, statement
{
            CurrentSemanticValue.stVal = new ForNode(ValueStack[ValueStack.Depth-7].stVal, ValueStack[ValueStack.Depth-5].eVal, ValueStack[ValueStack.Depth-3].stVal, ValueStack[ValueStack.Depth-1].stVal, CurrentLocationSpan);
        }
        break;
      case 70: // for_initializer -> decl
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 71: // for_initializer -> assign
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 72: // for_statement -> assign
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 73: // for_statement -> proc_call
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 74: // return -> RETURN, return_expr
{ CurrentSemanticValue.stVal = new ReturnNode(ValueStack[ValueStack.Depth-1].eVal, CurrentLocationSpan); }
        break;
      case 75: // return_expr -> bool_expr
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 76: // return_expr -> /* empty */
{ CurrentSemanticValue.eVal = null; }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
