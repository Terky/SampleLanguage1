
// ==========================================================================
//  GPPG error listing for yacc source file <SimpleYacc.y>
// ==========================================================================
//  Version:  1.3.6
//  Machine:  DESKTOP-0KBKC6T
//  DateTime: 11/24/2017 3:13:49 PM
//  UserName: Coelum
// ==========================================================================


%{
// This defenition goes to class GPPGParser, which is a parser, that generated by gppg system
    public MainProgramNode root; // Syntax tree root 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
%}

%output = SimpleYacc.cs

%union { 
			public bool bVal;
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
			public FunHeader fHead;
            public DeclId declId;
            public DeclType declType;
			public FormalPaparms formParams;
			public List<ExprNode> eList;
       }

%using ProgramTree;

%namespace SimpleParser

%token BEGIN END CYCLE ASSIGN SEMICOLON PLUS MINUS LEFT_BRACKET RIGHT_BRACKET DIV MULT VAR COLON COMMA RETURN GT LT EQ NEQ GET LET AND OR NOT IF ELSE WHILE DO FOR
%token <iVal> INUM 
%token <dVal> DNUM 
%token <bVal> BVAL
%token <sVal> ID

%type <eVal> expr ident term factor function fun_list fun_call b_expr b_term b_factor not_factor relation
%type <stVal> assign statement decl return cond proc_call while_cycle do_while_cycle do_while_cycle for_cycle for_initializer for_statement 
%type <blVal> stlist block
%type <fHead> fun_header
%type <formParams> formal_params
%type <eList> expr_list
%type <declId> decl_id
%type <declType> type

%%
// Warning: Terminating decl_id fixes the following size-7 NonTerminal set
   // {function, fun_list, fun_header, decl_id, progr, $accept, formal_params_fill}
// Error: NonTerminal symbol "decl_id" has no productions
// Error: There are 7 non-terminating NonTerminal Symbols
   //  {function, fun_list, fun_header, decl_id, progr, $accept, formal_params_fill}
// ---------------------------------------------------------------------------------

progr
    : fun_list { root = $1 as MainProgramNode; }
	;

fun_list
    : function { $$ = new MainProgramNode($1 as FunNode); }
	| fun_list function { ($1 as MainProgramNode).Add($2 as FunNode); $$ = $1; }
	;

function
    : fun_header block { $$ = new FunNode($1, $2); }
	;

decl_id:
    : ID { $$ = new DeclIdNode($1, @1); }
//--^
// Error: Syntax error, unexpected ':'
// -----------------------------------
    ;

fun_header
    : type decl_id LEFT_BRACKET formal_params RIGHT_BRACKET { $$ = new FunHeader($1, $2, $4); }
    ;

formal_params
    : formal_params_fill { $$ = $1; }
    |
    ;

formal_params_fill
    : type decl_id { $$ = new FormalParams($1, $2); }
	| formal_params_fill COMMA type decl_id  
	    {
		    $1.Add($3,$4);
			$$ = $1; 
		}
	;

stlist
    : statement { $$ = new BlockNode($1); }
	| stlist statement 
	    { 
		    if ($2 != null)
            {
			    $1.Add($2);
            }
			$$ = $1; 
		}
	;

statement
    : assign SEMICOLON         { $$ = $1; }
	| cond                     { $$ = $1; }
	| decl SEMICOLON		   { $$ = $1; }
	| block				       { $$ = $1; }
	| return SEMICOLON         { $$ = $1; }
	| proc_call SEMICOLON	   { $$ = $1; }
	| while_cycle		       { $$ = $1; }
	| do_while_cycle SEMICOLON { $$ = $1; }
    | for_cycle                { $$ = $1; }
	| SEMICOLON                { $$ = null; }
    ;

proc_call
    : fun_call { $$ = new ProcCallNode($1 as FunCallNode); }
    ;

decl
    : ID ID { $$ = new DeclNode($1, $2); }
	| ID assign { $$ = new DeclNode($1, $2 as AssignNode); }
	;

fun_call
    : ID LEFT_BRACKET expr_list RIGHT_BRACKET { $$ = new FunCallNode($1, $3); }
	| ID LEFT_BRACKET RIGHT_BRACKET { $$ = new FunCallNode($1); }
	;

expr_list
    : b_expr
        {
            $$ = new List<ExprNode>();
		    $$.Add($1);
        }
	| expr_list COMMA b_expr 
		{
		    $1.Add($3);
			$$ = $1; 
		}
	;

ident
    : ID { $$ = new IdNode($1); }	
	;

type
    : ID { $$ = new TypeNode($1, @1); }
    ;
	
assign
    : ident ASSIGN b_expr { $$ = new AssignNode($1 as IdNode, $3); }
	;

cond
    : IF LEFT_BRACKET b_expr RIGHT_BRACKET statement ELSE statement { $$ = new CondNode($3, $5, $7); }
	| IF LEFT_BRACKET b_expr RIGHT_BRACKET statement { $$ = new CondNode($3, $5, null); }
	;

b_expr
    : b_expr OR b_term { $$ = new BinExprNode($1, $3, OpType.Or); }
	| b_term { $$ = $1; }
	;

b_term
    : b_term AND not_factor { $$ = new BinExprNode($1, $3, OpType.And); }
	| not_factor { $$ = $1; }
	;

not_factor
    : b_factor { $$ = $1; }
	| NOT b_factor { $$ = new UnExprNode($2, OpType.Not); }
	;

b_factor
    : BVAL { $$ = new BoolNode($1); }
	| relation { $$ = $1; }
	;

relation
    : expr GT expr { $$ = new BinExprNode($1, $3, OpType.Gt); }
	| expr LT expr { $$ = new BinExprNode($1, $3, OpType.Lt); }
	| expr LET expr { $$ = new BinExprNode($1, $3, OpType.Let); }
	| expr GET expr { $$ = new BinExprNode($1, $3, OpType.Get); }
	| expr EQ expr { $$ = new BinExprNode($1, $3, OpType.Eq); }
	| expr NEQ expr { $$ = new BinExprNode($1, $3, OpType.Neq); }
	| expr { $$ = $1; }
	;

expr
    : expr PLUS term { $$ = new BinExprNode($1, $3, OpType.Plus); }
	| expr MINUS term { $$ = new BinExprNode($1, $3, OpType.Minus); }
	| term { $$ = $1; }
	;

term
    : term MULT factor { $$ = new BinExprNode($1, $3, OpType.Mult); }
	| term DIV factor { $$ = new BinExprNode($1, $3, OpType.Div); }
	| factor { $$ = $1; }
	;

factor
    : LEFT_BRACKET b_expr RIGHT_BRACKET { $$ = $2; }
	| ident  { $$ = $1 as IdNode; }
	| fun_call { $$ = $1 as FunCallNode; }
	| INUM { $$ = new IntNumNode($1); }
	| DNUM { $$ = new DoubleNumNode($1); }
	;

block
    : BEGIN	stlist END { $$ = $2; }
	;

while_cycle
    : WHILE LEFT_BRACKET b_expr RIGHT_BRACKET statement { $$ = new WhileNode($3, $5); }
	;

do_while_cycle
    : DO statement WHILE LEFT_BRACKET b_expr RIGHT_BRACKET { $$ = new DoWhileNode($5, $2); }
	;

for_cycle     
    : FOR LEFT_BRACKET for_initializer SEMICOLON b_expr SEMICOLON for_statement RIGHT_BRACKET statement
        {
            $$ = new ForNode($3, $5, $7, $9);
        }
    ;

for_initializer
    : decl   { $$ = $1; }
    | assign { $$ = $1; }
    ;

for_statement
    : assign    { $$ = $1; }
    | proc_call { $$ = $1; }
    ;

return
    : RETURN b_expr { $$ = new ReturnNode($2); }
	| RETURN        { $$ = new ReturnNode(); }
    ;
%%

// ==========================================================================

